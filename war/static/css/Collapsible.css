/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * CSS Stylesheet for a collapsible object.
 *
 * author: hearnden@google.com (David Hearnden)
 */

.collapsible {
  display: inline;
}

.toggle {
  display: inline-block;
  cursor: pointer;
  margin: 0 0.3em;
  white-space: nowrap;    /* Keeps bubble and arrow together. */
  font-size: 0.8em;
  vertical-align: 0.1em;  /* Keep center alignment with shrinking font. */
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
}

.expanded {
}

.collapsed {
}

.arrow {
  display: inline-block;  /* Inline, but with background. */
  height: 7px;
  width: 7px;
}

@sprite .expanded.unread .arrow {
  gwt-image: 'expandedUnread';
  overflow: visible;
  height: 12px;
}

@sprite .collapsed.unread .arrow {
  gwt-image: 'collapsedUnread';
  overflow: visible;
  height: 12px;
}

@sprite .expanded.read .arrow {
  gwt-image: 'expandedRead';
  overflow: visible;
  height: 12px;
}

@sprite .collapsed.read .arrow {
  gwt-image: 'collapsedRead';
  overflow: visible;
  height: 12px;
}

.count {
  border-radius: 3px;
  -moz-border-radius: 3px;
  -webkit-border-radius: 3px;
  padding: 0 0.5em;
  margin: 0 0.3em;
  font-weight: bold;
  position: relative;
}

.unread .count {
  display: none;
}

.read .count {
  display: none;
}

.expanded.dropContainer {
  display: none;
}

/*
 * The collapsed rule must come after the expanded rule for precedence, in order
 * to handle correctly the case of multiply nested collapsibles, where both
 * (.expanded .dropContainer) and (.collapsed .dropContainer) may match.
 */ 
.collapsed.dropContainer {
  display: none;
}

@sprite .drop {
  gwt-image: 'callout';
  vertical-align: bottom;
  display: inline-block;
  background-color: #FFF;
}

/* Firefox gets it wrong. */
@if user.agent gecko1_8 {
  .drop {
    margin-bottom: -15px; /* Magic height. */
  }
} @else {
  .drop {
    margin-bottom: -16px; /* Magic height. */
  }
}

.chrome {
  /*
   * It is assumed that this box is inside something with a left margin, and
   * that when the box is expanded, the callout is to creep into that margin.
   * All other sides go in.      
   */
  margin: 0.5em 0 0.5em 3.5em;
  border-left: 1px solid #ccc; 
  border-bottom: 1px solid #ccc;
  box-shadow: -2px 2px 4px #ccc;
  -moz-box-shadow: -1px 1px 2px #ccc;
  -webkit-box-shadow: -2px 2px 4px #ccc;
  border-radius: 0 0 0 4px; 
  -moz-border-radius: 0 0 0 4px;
  -webkit-border-radius: 0 0 0 4px;
}

@if user.agent ie6 ie8 {
  /*
   * Force the .chrome element to get hasLayout.
   */
  .chrome {
    zoom: 1;
  }
}

.chrome.collapsed  {
  display: none;
}
